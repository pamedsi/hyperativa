openapi: 3.0.3
info:
  title: Hyperativa API
  description: API for user management, authentication, and card operations
  version: 1.0.0
  contact:
    name: Hyperativa
    email: support@hyperativa.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.hyperativa.com
    description: Production server

paths:
  /user:
    post:
      tags:
        - User
      summary: Create a new user
      description: Endpoint to create a new user in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input data
        '500':
          description: Internal server error

  /user/{identifier}:
    delete:
      tags:
        - User
      summary: Delete a user
      description: Endpoint to delete a user from the system
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer authentication token
        - name: identifier
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the user to be deleted
      responses:
        '202':
          description: Delete request accepted
        '401':
          description: Invalid or expired token
        '404':
          description: User not found
        '500':
          description: Internal server error

  /authentication/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Endpoint for user authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '202':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Invalid credentials
        '401':
          description: Authentication failed
        '500':
          description: Internal server error

  /authentication/validation:
    get:
      tags:
        - Authentication
      summary: Validate token
      description: Endpoint to validate an authentication token
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer authentication token
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidTokenResponse'
        '401':
          description: Invalid or expired token
        '500':
          description: Internal server error

  /card/single:
    post:
      tags:
        - Card
      summary: Add single card
      description: Endpoint to add a single card to the system
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardNumber'
      responses:
        '201':
          description: Card created successfully
        '400':
          description: Invalid card data
        '401':
          description: Invalid or expired token
        '500':
          description: Internal server error

  /card/batch:
    post:
      tags:
        - Card
      summary: Add cards in batch
      description: Endpoint to add multiple cards via file upload
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer authentication token
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Text file containing card numbers (plain text only)
      responses:
        '201':
          description: Cards created successfully
        '400':
          description: Invalid file or unsupported format
        '401':
          description: Invalid or expired token
        '500':
          description: Internal server error

  /card/{cardNumber}:
    get:
      tags:
        - Card
      summary: Get card information
      description: Endpoint to retrieve information for a specific card
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer authentication token
        - name: cardNumber
          in: path
          required: true
          schema:
            type: string
          description: Card number
      responses:
        '200':
          description: Card information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardId'
        '401':
          description: Invalid or expired token
        '404':
          description: Card not found
        '500':
          description: Internal server error

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - birthdate
      properties:
        name:
          type: string
          description: User's name
          example: "John Smith"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.smith@email.com"
        password:
          type: string
          format: password
          description: User's password
          minLength: 8
          example: "securePassword123"
        birthdate:
          type: string
          format: date
          description: User's birthdate in DD/MM/YYYY format
          example: "15/05/1990"

    UserCredentials:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: "john.smith@hyperativa.com"
        password:
          type: string
          format: password
          example: "securePassword123"

    AuthenticationResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        role:
          type: string
          description: User's role
          enum:
            - ADMIN
            - USER
          example: "USER"

    ValidTokenResponse:
      type: object
      properties:
        name:
          type: string
          description: User's name
          example: "John Smith"
        role:
          type: string
          description: User's role
          enum:
            - ADMIN
            - COSTUMER
          example: "COSTUMER"

    CardNumber:
      type: object
      required:
        - cardNumber
      properties:
        cardNumber:
          type: string
          description: Card number
          example: "1234567890123456"

    CardId:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique card identifier
          example: "123e4567-e89b-12d3-a456-426614174000"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []